// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: thumbnail_query.sql

package thumbnail

import (
	"context"
)

const DeleteThumbnail = `-- name: DeleteThumbnail :exec
DELETE FROM "thumbnail" WHERE archive_id == (?1)
`

func (q *Queries) DeleteThumbnail(ctx context.Context, archiveID int64) error {
	_, err := q.db.ExecContext(ctx, DeleteThumbnail, archiveID)
	return err
}

const DoesArchiveIDExist = `-- name: DoesArchiveIDExist :one
SELECT EXISTS(SELECT archive_id FROM "thumbnail" WHERE archive_id == (?1) LIMIT 1)
`

func (q *Queries) DoesArchiveIDExist(ctx context.Context, archiveID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, DoesArchiveIDExist, archiveID)
	var archive_id int64
	err := row.Scan(&archive_id)
	return archive_id, err
}

const GetBlurHash = `-- name: GetBlurHash :one
SELECT hash FROM "thumbnail_blurhash" WHERE archive_id == (?1)
`

func (q *Queries) GetBlurHash(ctx context.Context, archiveID int64) (string, error) {
	row := q.db.QueryRowContext(ctx, GetBlurHash, archiveID)
	var hash string
	err := row.Scan(&hash)
	return hash, err
}

const GetJpegMedium = `-- name: GetJpegMedium :one
SELECT medium FROM "thumbnail_jpeg" WHERE archive_id == (?1)
`

func (q *Queries) GetJpegMedium(ctx context.Context, archiveID int64) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, GetJpegMedium, archiveID)
	var medium []byte
	err := row.Scan(&medium)
	return medium, err
}

const GetJpeglarge = `-- name: GetJpeglarge :one
SELECT large FROM "thumbnail_jpeg" WHERE archive_id == (?1)
`

func (q *Queries) GetJpeglarge(ctx context.Context, archiveID int64) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, GetJpeglarge, archiveID)
	var large []byte
	err := row.Scan(&large)
	return large, err
}

const GetJpegsmall = `-- name: GetJpegsmall :one
SELECT small FROM "thumbnail_jpeg" WHERE archive_id == (?1)
`

func (q *Queries) GetJpegsmall(ctx context.Context, archiveID int64) ([]byte, error) {
	row := q.db.QueryRowContext(ctx, GetJpegsmall, archiveID)
	var small []byte
	err := row.Scan(&small)
	return small, err
}

const NewBlurHash = `-- name: NewBlurHash :exec
INSERT INTO "thumbnail_blurhash" (archive_id, hash) VALUES (?1, ?2)
`

type NewBlurHashParams struct {
	ArchiveID int64
	Hash      string
}

func (q *Queries) NewBlurHash(ctx context.Context, arg NewBlurHashParams) error {
	_, err := q.db.ExecContext(ctx, NewBlurHash, arg.ArchiveID, arg.Hash)
	return err
}

const NewJpeg = `-- name: NewJpeg :exec
INSERT OR REPLACE INTO "thumbnail_jpeg" (archive_id, small, medium, large) VALUES (?1, ?2, ?3, ?4)
`

type NewJpegParams struct {
	ArchiveID int64
	Small     []byte
	Medium    []byte
	Large     []byte
}

func (q *Queries) NewJpeg(ctx context.Context, arg NewJpegParams) error {
	_, err := q.db.ExecContext(ctx, NewJpeg,
		arg.ArchiveID,
		arg.Small,
		arg.Medium,
		arg.Large,
	)
	return err
}

const NewThumbnail = `-- name: NewThumbnail :exec
INSERT INTO "thumbnail" (archive_id, has_jpeg, has_webp) VALUES (?1, 0, 0)
`

func (q *Queries) NewThumbnail(ctx context.Context, archiveID int64) error {
	_, err := q.db.ExecContext(ctx, NewThumbnail, archiveID)
	return err
}
